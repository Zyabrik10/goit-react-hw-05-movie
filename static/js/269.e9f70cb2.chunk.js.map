{"version":3,"file":"static/js/269.e9f70cb2.chunk.js","mappings":"yRAGQA,EAA6BC,EAAAA,EAAAA,YAAhBC,EAAgBD,EAAAA,EAAAA,YACtB,SAASE,EAAgBC,GAAuB,IAApBC,EAAMD,EAANC,OAAQC,EAAOF,EAAPE,QACjD,OACEC,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAGC,UAAS,GAAAC,OAAKX,EAAW,aAAYQ,SAAEH,KAC1CI,EAAAA,EAAAA,KAAA,KAAGC,UAAS,GAAAC,OAAKT,EAAW,aAAYM,SAAEF,MAGhD,CAEAH,EAAiBS,UAAY,CAC3BP,OAAQQ,IAAAA,OACRP,QAASO,IAAAA,QCVX,IAAQC,EAAiBb,EAAAA,EAAAA,aACV,SAASc,EAAgBX,GAAe,IAAZY,EAAOZ,EAAPY,QACzC,OACEP,EAAAA,EAAAA,KAAA,MAAIC,UAAS,GAAAC,OAAKG,EAAY,gBAAeN,SAC1CQ,EAAQC,KAAI,SAAAC,GAAA,IAAGb,EAAMa,EAANb,OAAQC,EAAOY,EAAPZ,QAAO,OAC7BG,EAAAA,EAAAA,KAACN,EAAgB,CAAgBE,OAAQA,EAAQC,QAASA,IAAnCa,EAAAA,EAAAA,MAA8C,KAI7E,CCPe,SAASC,IACtB,IAAQC,GAAOC,EAAAA,EAAAA,MAAPD,GACRE,GAA8BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnCP,EAAOS,EAAA,GAAEE,EAAUF,EAAA,GAC1BG,GAA4CJ,EAAAA,EAAAA,WAAS,GAAMK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAApDE,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GACxCG,GAAkCR,EAAAA,EAAAA,WAAS,GAAMS,GAAAP,EAAAA,EAAAA,GAAAM,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GA8B9B,OA5BAG,EAAAA,EAAAA,YAAU,WACRD,GAAa,IAEbE,EAAAA,EAAAA,IAAiBhB,GACdiB,MAAK,SAAAlC,GAAe,IACXmC,EADGnC,EAAJoC,KACCD,QAEe,IAAnBA,EAAQE,OAAcV,GAAkB,GACvCA,GAAkB,GAEvBJ,EAAWY,GACXJ,GAAa,EACf,IACCO,OAAM,SAAAC,GACLC,QAAQC,IAAIF,GACZR,GAAa,GACbJ,GAAkB,EACpB,GACJ,GAAG,CAACV,IAUGa,GAAYzB,EAAAA,EAAAA,KAACqC,EAAAA,EAAM,IAPjBhB,GACLrB,EAAAA,EAAAA,KAACsC,EAAAA,EAAY,CAACC,QAAQ,kCAEtBvC,EAAAA,EAAAA,KAACM,EAAgB,CAACC,QAASA,GAKjC,CD1BAD,EAAiBH,UAAY,CAC3BqC,QAASpC,IAAAA,M,uDEhBJ,IAkBIM,EAAS,WAAH,IAAI+B,EAAIC,UAAAV,OAAA,QAAAW,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAAE,OAC5BE,OAAOC,gBAAgB,IAAIC,WAAWL,IAAOM,QAAO,SAACnC,EAAIoC,GAWvD,OAREpC,IAFFoC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGV,GAAG,GAAG,C","sources":["components/Movie/MoviewReviews/MovieReviewsList/MovieReviewsItem/MoviewReviewsItem.jsx","components/Movie/MoviewReviews/MovieReviewsList/MovieReviewsList.jsx","components/Movie/MoviewReviews/MoviewReviews.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import PropsType from 'props-type';\nimport styles from 'css/movie.module.css';\n\nconst { review_name, review_text } = styles;\nexport default function MovieReviewsItem({ author, content }) {\n  return (\n    <li>\n      <p className={`${review_name} global-p`}>{author}</p>\n      <p className={`${review_text} global-p`}>{content}</p>\n    </li>\n  );\n}\n\nMovieReviewsItem.propsType = {\n  author: PropsType.string,\n  content: PropsType.string,\n};\n","import PropsType from 'props-type';\nimport { nanoid } from 'nanoid';\nimport MovieReviewsItem from './MovieReviewsItem/MoviewReviewsItem';\nimport styles from 'css/movie.module.css';\n\nconst { reviews_list } = styles;\nexport default function MovieReviewsList({ reviews }) {\n  return (\n    <ul className={`${reviews_list} global-list`}>\n      {reviews.map(({ author, content }) => (\n        <MovieReviewsItem key={nanoid()} author={author} content={content} />\n      ))}\n    </ul>\n  );\n}\n\nMovieReviewsList.propsType = {\n  credits: PropsType.array,\n};\n","import { useParams } from 'react-router-dom';\nimport { fetchFilmReviews } from 'js/fetch-films-func';\nimport { useEffect, useState } from 'react';\nimport NothingFound from 'components/NothingFound/NothingFound';\nimport { Loader } from 'components/Loader/Loader';\nimport MovieReviewsList from './MovieReviewsList/MovieReviewsList';\n\nexport default function MovieReviews() {\n  const { id } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [isNothingFound, setIsNothingFound] = useState(false);\n  const [loadFilms, setLoadFilms] = useState(false);\n\n  useEffect(() => {\n    setLoadFilms(true);\n\n    fetchFilmReviews(id)\n      .then(({ data }) => {\n        const { results } = data;\n\n        if (results.length === 0) setIsNothingFound(true);\n        else setIsNothingFound(false);\n\n        setReviews(results);\n        setLoadFilms(false);\n      })\n      .catch(e => {\n        console.log(e);\n        setLoadFilms(false);\n        setIsNothingFound(true);\n      });\n  }, [id]);\n\n  function showCredits() {\n    return isNothingFound ? (\n      <NothingFound message=\"There is no infoðŸ˜¢\" />\n    ) : (\n      <MovieReviewsList reviews={reviews} />\n    );\n  }\n\n  return loadFilms ? <Loader /> : showCredits();\n}\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["review_name","styles","review_text","MovieReviewsItem","_ref","author","content","_jsxs","children","_jsx","className","concat","propsType","PropsType","reviews_list","MovieReviewsList","reviews","map","_ref2","nanoid","MovieReviews","id","useParams","_useState","useState","_useState2","_slicedToArray","setReviews","_useState3","_useState4","isNothingFound","setIsNothingFound","_useState5","_useState6","loadFilms","setLoadFilms","useEffect","fetchFilmReviews","then","results","data","length","catch","e","console","log","Loader","NothingFound","message","credits","size","arguments","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}