{"version":3,"file":"static/js/20.36b2ff92.chunk.js","mappings":"8QAGQA,EAAkBC,EAAAA,EAAAA,cAEX,SAASC,EAAaC,GAAqC,IAAlCC,EAAYD,EAAZC,aAAcC,EAAIF,EAAJE,KAAMC,EAASH,EAATG,UAC1D,OACEC,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CACGJ,GACCK,EAAAA,EAAAA,KAAA,OACEC,IAAG,kCAAAC,OAAoCP,GACvCQ,IAAI,GACJC,QAAQ,OACRC,UAAWd,KAGbS,EAAAA,EAAAA,KAAA,OAAKK,UAAWd,EAAcQ,SAAC,cAGjCC,EAAAA,EAAAA,KAAA,KAAGK,UAAU,WAAUN,SAAEH,KACzBI,EAAAA,EAAAA,KAAA,KAAGK,UAAU,WAAUN,SAAEF,MAG/B,CAEAJ,EAAca,UAAY,CACxBX,aAAcY,IAAAA,OACdX,KAAMW,IAAAA,OACNV,UAAWU,IAAAA,Q,aCtBLC,EAAchB,EAAAA,EAAAA,UAEP,SAASiB,EAAaf,GAAe,IAAZgB,EAAOhB,EAAPgB,QACtC,OACEV,EAAAA,EAAAA,KAAA,MAAIK,UAAS,GAAAH,OAAKM,EAAS,+BAA8BT,SACtDW,GAAWA,EAAQC,OAChBD,EAAQE,KAAI,SAAAC,GAAA,IAAGlB,EAAYkB,EAAZlB,aAAcC,EAAIiB,EAAJjB,KAAMC,EAASgB,EAAThB,UAAS,OAC1CG,EAAAA,EAAAA,KAACP,EAAa,CAEZE,aAAcA,EACdC,KAAMA,EACNC,UAAWA,IAHNiB,EAAAA,EAAAA,MAIL,IAEJ,MAGV,CChBe,SAASC,IACtB,IAAQC,GAAOC,EAAAA,EAAAA,MAAPD,GACRE,GAA8BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnCR,EAAOU,EAAA,GAAEE,EAAUF,EAAA,GAC1BG,GAA4CJ,EAAAA,EAAAA,WAAS,GAAMK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAApDE,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GACxCG,GAAkCR,EAAAA,EAAAA,WAAS,GAAMS,GAAAP,EAAAA,EAAAA,GAAAM,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GA8B9B,OA5BAG,EAAAA,EAAAA,YAAU,WACRD,GAAa,IAEbE,EAAAA,EAAAA,IAAkBhB,GACfiB,MAAK,SAAAvC,GAAe,IACXwC,EADGxC,EAAJyC,KACCD,KAEHA,GAASA,EAAKvB,OACde,GAAkB,GADIA,GAAkB,GAG7CJ,EAAWY,GACXJ,GAAa,EACf,IACCM,OAAM,SAAAC,GACLC,QAAQC,IAAIF,GACZP,GAAa,GACbJ,GAAkB,EACpB,GACJ,GAAG,CAACV,IAUGa,GAAY7B,EAAAA,EAAAA,KAACwC,EAAAA,EAAM,IAPjBf,GACLzB,EAAAA,EAAAA,KAACyC,EAAAA,EAAY,CAACC,QAAQ,kCAEtB1C,EAAAA,EAAAA,KAACS,EAAa,CAACC,QAASA,GAK9B,CDjBAD,EAAcH,UAAY,CACxBI,QAASH,IAAAA,M,uDEzBJ,IAkBIO,EAAS,WAAH,IAAI6B,EAAIC,UAAAjC,OAAA,QAAAkC,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAAE,OAC5BE,OAAOC,gBAAgB,IAAIC,WAAWL,IAAOM,QAAO,SAACjC,EAAIkC,GAWvD,OARElC,IAFFkC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGV,GAAG,GAAG,C","sources":["components/Movie/MovieCast/MovieCastList/MovieCastItem/MovieCastItem.jsx","components/Movie/MovieCast/MovieCastList/MovieCastList.jsx","components/Movie/MovieCast/MovieCast.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import PropsType from 'props-type';\nimport styles from 'css/movie.module.css';\n\nconst { actor_preview } = styles;\n\nexport default function MovieCastItem({ profile_path, name, character }) {\n  return (\n    <li>\n      {profile_path ? (\n        <img\n          src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n          alt=\"\"\n          loading=\"lazy\"\n          className={actor_preview}\n        />\n      ) : (\n        <div className={actor_preview}>No image</div>\n      )}\n\n      <p className=\"global-p\">{name}</p>\n      <p className=\"global-p\">{character}</p>\n    </li>\n  );\n}\n\nMovieCastItem.propsType = {\n  profile_path: PropsType.string,\n  name: PropsType.string,\n  character: PropsType.string,\n};\n","import PropsType from 'props-type';\nimport MovieCastItem from './MovieCastItem/MovieCastItem';\nimport { nanoid } from 'nanoid';\n\nimport styles from 'css/movie.module.css';\n\nconst { cast_list } = styles;\n\nexport default function MovieCastList({ credits }) {\n  return (\n    <ul className={`${cast_list} flex-container global-list`}>\n      {credits && credits.length\n        ? credits.map(({ profile_path, name, character }) => (\n            <MovieCastItem\n              key={nanoid()}\n              profile_path={profile_path}\n              name={name}\n              character={character}\n            />\n          ))\n        : null}\n    </ul>\n  );\n}\n\nMovieCastList.propsType = {\n  credits: PropsType.array,\n};\n","import { useParams } from 'react-router-dom';\nimport { fetchFilmCreadits } from 'js/fetch-films-func';\nimport { useEffect, useState } from 'react';\nimport NothingFound from 'components/NothingFound/NothingFound';\nimport { Loader } from 'components/Loader/Loader';\nimport MovieCastList from './MovieCastList/MovieCastList';\n\nexport default function MovieCast() {\n  const { id } = useParams();\n  const [credits, setCredits] = useState([]);\n  const [isNothingFound, setIsNothingFound] = useState(false);\n  const [loadFilms, setLoadFilms] = useState(false);\n\n  useEffect(() => {\n    setLoadFilms(true);\n\n    fetchFilmCreadits(id)\n      .then(({ data }) => {\n        const { cast } = data;\n\n        if (!cast || !cast.length) setIsNothingFound(true);\n        else setIsNothingFound(false);\n\n        setCredits(cast);\n        setLoadFilms(false);\n      })\n      .catch(e => {\n        console.log(e);\n        setLoadFilms(false);\n        setIsNothingFound(true);\n      });\n  }, [id]);\n\n  function showCredits() {\n    return isNothingFound ? (\n      <NothingFound message=\"There is no infoðŸ˜¢\" />\n    ) : (\n      <MovieCastList credits={credits} />\n    );\n  }\n\n  return loadFilms ? <Loader /> : showCredits();\n}\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["actor_preview","styles","MovieCastItem","_ref","profile_path","name","character","_jsxs","children","_jsx","src","concat","alt","loading","className","propsType","PropsType","cast_list","MovieCastList","credits","length","map","_ref2","nanoid","MovieCast","id","useParams","_useState","useState","_useState2","_slicedToArray","setCredits","_useState3","_useState4","isNothingFound","setIsNothingFound","_useState5","_useState6","loadFilms","setLoadFilms","useEffect","fetchFilmCreadits","then","cast","data","catch","e","console","log","Loader","NothingFound","message","size","arguments","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}